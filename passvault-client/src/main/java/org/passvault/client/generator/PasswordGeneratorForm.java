package org.passvault.client.generator;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import org.passvault.client.Main;
import org.passvault.core.Globals;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.util.Locale;

/**
 * ASCII Password Generator
 *
 * @author john@chav.is 9/30/2024
 */
public class PasswordGeneratorForm extends JFrame {
	
	/**
	 * The current parameters for the password generator
	 */
	private GeneratorParameters.Builder params;
	
	/**
	 * Generated by GUI Designer
	 */
	private JTextField passwordField;
	private JButton copyButton;
	private JButton regenerateButton;
	private JPanel rootPanel;
	private JPanel optionsPanel;
	private JPanel generatorPanel;
	private JTextArea charactersTextArea;
	private JTextArea passwordTextArea;
	private JLabel characterSetLabel;
	private JTextArea specialCharactersTextArea;
	private JPanel passwordLengthPanel;
	private JLabel passwordLengthLabel;
	private JSlider passwordLengthSlider;
	private JTextField passwordLengthTextField;
	private JPanel specialCharactersPanel;
	private JLabel specialCharactersLabel;
	private JFormattedTextField specialCharactersCountField;
	private JPanel alphaNumericCharactersPanel;
	private JCheckBox lowercaseAlphabetCheckBox;
	private JCheckBox uppercaseAlphabetCheckBox;
	private JCheckBox numbersCheckBox;
	private JSeparator separator1;
	private JCheckBox ambiguousCharactersCheckBox;
	private JSpinner passwordLengthSpinner;
	private JSpinner specialCharactersSpinner;
	private JButton resetToDefaultsButton;
	
	public static PasswordGeneratorForm open(GeneratorParameters.Builder params) {
		final PasswordGeneratorForm frame = new PasswordGeneratorForm(params);
		
		frame.setLocationRelativeTo(null); //center of screen
		frame.setVisible(true);
		return frame;
	}
	
	private PasswordGeneratorForm(GeneratorParameters.Builder params) {
		super("Password Generator");
		this.params = params;
		
		//$$$setupUI$$$();
		this.setContentPane(this.rootPanel);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.pack();
		this.setResizable(false);
		
		this.setIconImage(Main.ICON);
		
		this.initializeComponents(this.params);
		this.updateValues(this.params);
		this.regeneratePassword();
		
		//TODO: save config here at end of init
	}
	
	private void initializeComponents(GeneratorParameters.Builder params) {
		
		//button actions
		this.copyButton.addActionListener(e -> {
			final String password = this.passwordTextArea.getText();
			
			Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
					new StringSelection(password),
					null
			);
		});
		this.regenerateButton.addActionListener(e -> this.regeneratePassword());
		this.resetToDefaultsButton.addActionListener(e -> {
			this.params = new GeneratorParameters.Builder();
			this.initializeComponents(this.params);
			this.updateValues(this.params);
			this.regeneratePassword();
		});
		
		
		/////////////////////////////////////////
		//checkboxes
		/////////////////////////////////////////
		this.lowercaseAlphabetCheckBox.addActionListener(e -> {
			final JCheckBox checkBox = (JCheckBox) e.getSource();
			params.lowercaseAlphabet = checkBox.isSelected();
			regeneratePassword();
		});
		this.uppercaseAlphabetCheckBox.addActionListener(e -> {
			final JCheckBox checkBox = (JCheckBox) e.getSource();
			params.uppercaseAlphabet = checkBox.isSelected();
			regeneratePassword();
		});
		this.numbersCheckBox.addActionListener(e -> {
			final JCheckBox checkBox = (JCheckBox) e.getSource();
			params.numbers = checkBox.isSelected();
			regeneratePassword();
		});
		this.ambiguousCharactersCheckBox.addActionListener(e -> {
			final JCheckBox checkBox = (JCheckBox) e.getSource();
			params.avoidAmbiguousChars = checkBox.isSelected();
			regeneratePassword();
		});
		
		/////////////////////////////////////////
		//password length stuff
		/////////////////////////////////////////
		this.passwordLengthSlider.setValue(params.getPasswordLength());
		this.passwordLengthSlider.setMaximum(GeneratorParameters.MAX_PASSWORD_LENGTH);
		this.passwordLengthSpinner.setModel(new SpinnerNumberModel(
													params.getPasswordLength(),
													1,
													GeneratorParameters.MAX_PASSWORD_LENGTH,
													1
											)
		);
		this.passwordLengthSpinner.addChangeListener(e -> {
			final JSpinner spinner = (JSpinner) e.getSource();
			final int length = (int) spinner.getValue();
			this.updatePasswordLength(length, true, false);
		});
		this.passwordLengthSlider.addChangeListener(e -> {
			final JSlider slider = (JSlider) e.getSource();
			final int length = slider.getValue();
			this.updatePasswordLength(length, false, true);
		});
		/////////////////////////////////////////
		
		/////////////////////////////////////////
		//special characters
		/////////////////////////////////////////
		
		this.specialCharactersSpinner.setModel(new SpinnerNumberModel(
				params.specialCharCount,
				0,
				params.getMaxSpecialChars(),
				1
		));
		this.specialCharactersSpinner.addChangeListener(e -> {
			final JSpinner spinner = (JSpinner) e.getSource();
			params.specialCharCount = (int) spinner.getValue();
			regeneratePassword();
		});
		
		this.specialCharactersTextArea.setText(new String(params.specialChars));
		this.specialCharactersTextArea.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				params.specialChars = specialCharactersTextArea.getText().toCharArray();
				if(params.specialCharCount > 0) {
					regeneratePassword();
				}
			}
			
			@Override
			public void removeUpdate(DocumentEvent e) {
				params.specialChars = specialCharactersTextArea.getText().toCharArray();
				if(params.specialCharCount > 0 && params.specialChars.length > 0) {
					regeneratePassword();
				}
			}
			
			@Override
			public void changedUpdate(DocumentEvent e) {
				params.specialChars = specialCharactersTextArea.getText().toCharArray();
				if(params.specialCharCount > 0) {
					regeneratePassword();
				}
			}
		});
	}
	
	private void updatePasswordLength(int length, boolean updateSlider, boolean updateSpinner) {
		this.params.passwordLength = length;
		
		if(updateSlider) {
			this.passwordLengthSlider.setValue(length);
		}
		if(updateSpinner) {
			this.passwordLengthSpinner.setValue(length);
		}
		
		((SpinnerNumberModel) specialCharactersSpinner.getModel()).setMaximum(this.params.getMaxSpecialChars());
		regeneratePassword();
	}
	
	public void updateValues(GeneratorParameters.Builder params) {
		this.passwordLengthSlider.setValue(params.getPasswordLength());
		this.passwordLengthSpinner.setValue(params.getPasswordLength());
		
		this.specialCharactersSpinner.setValue(params.specialCharCount);
		this.specialCharactersTextArea.setText(new String(params.specialChars));
		
		this.lowercaseAlphabetCheckBox.setSelected(params.lowercaseAlphabet);
		this.uppercaseAlphabetCheckBox.setSelected(params.uppercaseAlphabet);
		this.numbersCheckBox.setSelected(params.numbers);
		this.ambiguousCharactersCheckBox.setSelected(params.avoidAmbiguousChars);
	}
	
	//TODO: save params to config
	public GeneratorParameters.Builder getParams() {
		return this.params;
	}
	
	private void regeneratePassword() {
		try {
			this.passwordTextArea.setText(PasswordGenerator.generatePassword(this.params.build()));
		} catch(GeneratorException e) {
			Globals.LOGGER.severe("Error generating password: " + e.getMessage());
			e.printStackTrace();
			this.passwordTextArea.setText("ERROR!!!! " + e.getMessage());
		}
	}
	
	private void createUIComponents() {
		// TODO: place custom component creation code here
		//image icons
		ImageIcon imageCopy = new ImageIcon();
		ImageIcon imageRegen = new ImageIcon();
		
		//buttons
		this.copyButton = new JButton(imageCopy);
		this.regenerateButton = new JButton(imageRegen);
		
		
	}
	
	
}
